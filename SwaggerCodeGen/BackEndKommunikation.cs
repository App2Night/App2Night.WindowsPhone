////----------------------
//// <auto-generated>
////     Generated using the NSwag toolchain v6.21.6150.29665 (NJsonSchema v5.12.6149.949) (http://NSwag.org)
//// </auto-generated>
////----------------------

//using System;
//using System.CodeDom.Compiler;
//using System.Collections.Generic;
//using System.Collections.ObjectModel;
//using System.ComponentModel;
//using System.ComponentModel.DataAnnotations;
//using System.Globalization;
//using System.IO;
//using System.Linq;
//using System.Net;
//using System.Net.Http;
//using System.Reflection;
//using System.Runtime.Serialization;
//using System.Runtime.CompilerServices;
//using System.Threading;
//using System.Threading.Tasks;
//using System.Text;
//using Newtonsoft.Json;
//using Newtonsoft.Json.Converters;
//using Newtonsoft.Json.Linq;
//using Newtonsoft.Json.Serialization;

//namespace SwaggerCodeGen
//{
//#pragma warning disable // Disable all warnings

//    [GeneratedCode("NSwag", "6.21.6150.29665")]
//    public partial class Client
//    {
//        public Client() : this("") { }

//        public Client(string baseUrl)
//        {
//            BaseUrl = baseUrl;
//        }

//        partial void PrepareRequest(HttpClient request, ref string url);

//        partial void ProcessResponse(HttpClient request, HttpResponseMessage response);

//        public string BaseUrl { get; set; }

//        /// <summary>Get Partys</summary>
//        /// <returns>Success</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public Task ApiPartyGetAsync()
//        {
//            return ApiPartyGetAsync(CancellationToken.None);
//        }

//        /// <summary>Get Partys</summary>
//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Success</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public async Task ApiPartyGetAsync(CancellationToken cancellationToken)
//        {
//            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Party");

//            var client_ = new HttpClient();
//            var request_ = new HttpRequestMessage();
//            PrepareRequest(client_, ref url_);
//            request_.Method = new HttpMethod("GET");
//            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//            ProcessResponse(client_, response_);

//            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//            var status_ = ((int)response_.StatusCode).ToString();

//            if (status_ == "200")
//            {
//                return;
//            }
//            else
//            {
//            }

//            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//        }

//        /// <summary>Creates a Party</summary>
//        /// <param name="value">JSON Body</param>
//        /// <returns>Ok</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public Task ApiPartyPostAsync(CreateParty value)
//        {
//            return ApiPartyPostAsync(value, CancellationToken.None);
//        }

//        /// <summary>Creates a Party</summary>
//        /// <param name="value">JSON Body</param>
//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Ok</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public async Task ApiPartyPostAsync(CreateParty value, CancellationToken cancellationToken)
//        {
//            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Party");

//            var client_ = new HttpClient();
//            var request_ = new HttpRequestMessage();
//            PrepareRequest(client_, ref url_);
//            var content_ = new StringContent(JsonConvert.SerializeObject(value));
//            content_.Headers.ContentType.MediaType = "application/json";
//            request_.Content = content_;
//            request_.Method = new HttpMethod("POST");
//            request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//            var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//            ProcessResponse(client_, response_);

//            var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//            var status_ = ((int)response_.StatusCode).ToString();

//            if (status_ == "400")
//            {
//                var result_ = default(CreateParty);
//                try
//                {
//                    if (responseData_.Length > 0)
//                        result_ = JsonConvert.DeserializeObject<CreateParty>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
//                }
//                catch (Exception exception)
//                {
//                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
//                }
//                throw new SwaggerException<CreateParty>("Bad Request", status_, responseData_, result_, null);
//            }
//            else
//            if (status_ == "201")
//            {
//                return;
//            }
//            else
//            {
//            }

//            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//        }

//        /// <summary>Get a Party by Id</summary>
//        /// <param name="id">Party Id</param>
//        /// <returns>Ok</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public Task<Party> ApiPartyId ={idGetAsync(Guid id)
//        {
//            return ApiPartyId={idGetAsync(id, CancellationToken.None);
//    }

//    /// <summary>Get a Party by Id</summary>
//    /// <param name="id">Party Id</param>
//    /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//    /// <returns>Ok</returns>
//    /// <exception cref="SwaggerException">A server side error occurred.</exception>
//    public async Task<Party> ApiPartyId ={idGetAsync(Guid id, CancellationToken cancellationToken)
//        {
//            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Party/id={id}");
    
//            if (id == null)
//                throw new ArgumentNullException("id");
//    url_ = url_.Replace("{id}", Uri.EscapeDataString(id.ToString()));
    
//            var client_ = new HttpClient();
//    var request_ = new HttpRequestMessage();
//            PrepareRequest(client_, ref url_);
//    request_.Method = new HttpMethod("GET");
//    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//    var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//            ProcessResponse(client_, response_);

//    var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//    var status_ = ((int)response_.StatusCode).ToString();
    
//            if (status_ == "200") 
//            {
//                var result_ = default(Party); 
//                try
//                {
//                    if (responseData_.Length > 0)
//                        result_ = JsonConvert.DeserializeObject<Party>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
//                    return result_; 
//                } 
//                catch (Exception exception) 
//                {
//                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
//                }
//            }
//            else
//            if (status_ == "400") 
//            {
//                throw new SwaggerException("Bad Request", status_, responseData_, null);
//            }
//            else
//            if (status_ == "404") 
//            {
//                throw new SwaggerException("Not Found", status_, responseData_, null);
//            }
//            else
//            {
//            }
    
//            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//        }

    
//        /// <summary>Updates a Party</summary>
//        /// <param name="id">Party Id (Passed in the URL)</param>
//        /// <param name="value">JSON Body</param>
//        /// <returns>Ok</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public Task ApiPartyId ={idPutAsync(Guid id, CreateParty value)
//        {
//            return ApiPartyId={idPutAsync(id, value, CancellationToken.None);
//        }
    
//        /// <summary>Updates a Party</summary>
//        /// <param name="id">Party Id (Passed in the URL)</param>
//        /// <param name="value">JSON Body</param>
//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Ok</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public async Task ApiPartyId ={idPutAsync(Guid id, CreateParty value, CancellationToken cancellationToken)
//        {
//            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Party/id={id}");
    
//            if (id == null)
//                throw new ArgumentNullException("id");
//url_ = url_.Replace("{id}", Uri.EscapeDataString(id.ToString()));
    
//            var client_ = new HttpClient();
//var request_ = new HttpRequestMessage();
//            PrepareRequest(client_, ref url_);
//var content_ = new StringContent(JsonConvert.SerializeObject(value));
//content_.Headers.ContentType.MediaType = "application/json";
//            request_.Content = content_;
//            request_.Method = new HttpMethod("PUT");
//request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//            ProcessResponse(client_, response_);

//var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//var status_ = ((int)response_.StatusCode).ToString();
    
//            if (status_ == "400") 
//            {
//                var result_ = default(CreateParty); 
//                try
//                {
//                    if (responseData_.Length > 0)
//                        result_ = JsonConvert.DeserializeObject<CreateParty>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));                                
//                } 
//                catch (Exception exception) 
//                {
//                    throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
//                }
//                throw new SwaggerException<CreateParty>("Bad Request", status_, responseData_, result_, null);
//            }
//            else
//            if (status_ == "200") 
//            {
//                return;     
//            }
//            else
//            if (status_ == "404") 
//            {
//                throw new SwaggerException("Not Found", status_, responseData_, null);
//            }
//            else
//            {
//            }
    
//            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//        }
    
//        /// <summary>Deletes a Party</summary>
//        /// <param name="id">Party Id (Passed in the URL)</param>
//        /// <returns>Ok</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public Task ApiPartyId ={idDeleteAsync(Guid id)
//        {
//            return ApiPartyId={idDeleteAsync(id, CancellationToken.None);
//        }
    
//        /// <summary>Deletes a Party</summary>
//        /// <param name="id">Party Id (Passed in the URL)</param>
//        /// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
//        /// <returns>Ok</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public async Task ApiPartyId ={idDeleteAsync(Guid id, CancellationToken cancellationToken)
//        {
//            var url_ = string.Format("{0}/{1}", BaseUrl, "api/Party/id={id}");
    
//            if (id == null)
//                throw new ArgumentNullException("id");
//url_ = url_.Replace("{id}", Uri.EscapeDataString(id.ToString()));
    
//            var client_ = new HttpClient();
//var request_ = new HttpRequestMessage();
//            PrepareRequest(client_, ref url_);
//request_.Method = new HttpMethod("DELETE");
//request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//            ProcessResponse(client_, response_);

//var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//var status_ = ((int)response_.StatusCode).ToString();
    
//            if (status_ == "200") 
//            {
//                return;     
//            }
//            else
//            if (status_ == "400") 
//            {
//                throw new SwaggerException("Bad Request", status_, responseData_, null);
//            }
//            else
//            if (status_ == "404") 
//            {
//                throw new SwaggerException("Not Found", status_, responseData_, null);
//            }
//            else
//            {
//            }
    
//            throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//        }
    
//        /// <returns>Success</returns>
//        /// <exception cref="SwaggerException">A server side error occurred.</exception>
//        public Task<ObservableCollection<string>> ApiValuesGetAsync()
//{
//    return ApiValuesGetAsync(CancellationToken.None);
//}

///// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
///// <returns>Success</returns>
///// <exception cref="SwaggerException">A server side error occurred.</exception>
//public async Task<ObservableCollection<string>> ApiValuesGetAsync(CancellationToken cancellationToken)
//{
//    var url_ = string.Format("{0}/{1}", BaseUrl, "api/Values");

//    var client_ = new HttpClient();
//    var request_ = new HttpRequestMessage();
//    PrepareRequest(client_, ref url_);
//    request_.Method = new HttpMethod("GET");
//    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//    var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//    ProcessResponse(client_, response_);

//    var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//    var status_ = ((int)response_.StatusCode).ToString();

//    if (status_ == "200")
//    {
//        var result_ = default(ObservableCollection<string>);
//        try
//        {
//            if (responseData_.Length > 0)
//                result_ = JsonConvert.DeserializeObject<ObservableCollection<string>>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
//            return result_;
//        }
//        catch (Exception exception)
//        {
//            throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
//        }
//    }
//    else
//    {
//    }

//    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//}

///// <returns>Success</returns>
///// <exception cref="SwaggerException">A server side error occurred.</exception>
//public Task ApiValuesPostAsync(string value)
//{
//    return ApiValuesPostAsync(value, CancellationToken.None);
//}

///// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
///// <returns>Success</returns>
///// <exception cref="SwaggerException">A server side error occurred.</exception>
//public async Task ApiValuesPostAsync(string value, CancellationToken cancellationToken)
//{
//    var url_ = string.Format("{0}/{1}", BaseUrl, "api/Values");

//    var client_ = new HttpClient();
//    var request_ = new HttpRequestMessage();
//    PrepareRequest(client_, ref url_);
//    var content_ = new StringContent(JsonConvert.SerializeObject(value));
//    content_.Headers.ContentType.MediaType = "application/json";
//    request_.Content = content_;
//    request_.Method = new HttpMethod("POST");
//    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//    var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//    ProcessResponse(client_, response_);

//    var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//    var status_ = ((int)response_.StatusCode).ToString();

//    if (status_ == "200")
//    {
//        return;
//    }
//    else
//    {
//    }

//    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//}

///// <returns>Success</returns>
///// <exception cref="SwaggerException">A server side error occurred.</exception>
//public Task<Party> ApiValuesByIdGetAsync(int id)
//{
//    return ApiValuesByIdGetAsync(id, CancellationToken.None);
//}

///// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
///// <returns>Success</returns>
///// <exception cref="SwaggerException">A server side error occurred.</exception>
//public async Task<Party> ApiValuesByIdGetAsync(int id, CancellationToken cancellationToken)
//{
//    var url_ = string.Format("{0}/{1}", BaseUrl, "api/Values/{id}");

//    if (id == null)
//        throw new ArgumentNullException("id");
//    url_ = url_.Replace("{id}", Uri.EscapeDataString(id.ToString()));

//    var client_ = new HttpClient();
//    var request_ = new HttpRequestMessage();
//    PrepareRequest(client_, ref url_);
//    request_.Method = new HttpMethod("GET");
//    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//    var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//    ProcessResponse(client_, response_);

//    var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//    var status_ = ((int)response_.StatusCode).ToString();

//    if (status_ == "200")
//    {
//        var result_ = default(Party);
//        try
//        {
//            if (responseData_.Length > 0)
//                result_ = JsonConvert.DeserializeObject<Party>(Encoding.UTF8.GetString(responseData_, 0, responseData_.Length));
//            return result_;
//        }
//        catch (Exception exception)
//        {
//            throw new SwaggerException("Could not deserialize the response body.", status_, responseData_, exception);
//        }
//    }
//    else
//    {
//    }

//    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//}

///// <returns>Success</returns>
///// <exception cref="SwaggerException">A server side error occurred.</exception>
//public Task ApiValuesByIdPutAsync(int id, string value)
//{
//    return ApiValuesByIdPutAsync(id, value, CancellationToken.None);
//}

///// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
///// <returns>Success</returns>
///// <exception cref="SwaggerException">A server side error occurred.</exception>
//public async Task ApiValuesByIdPutAsync(int id, string value, CancellationToken cancellationToken)
//{
//    var url_ = string.Format("{0}/{1}", BaseUrl, "api/Values/{id}");

//    if (id == null)
//        throw new ArgumentNullException("id");
//    url_ = url_.Replace("{id}", Uri.EscapeDataString(id.ToString()));

//    var client_ = new HttpClient();
//    var request_ = new HttpRequestMessage();
//    PrepareRequest(client_, ref url_);
//    var content_ = new StringContent(JsonConvert.SerializeObject(value));
//    content_.Headers.ContentType.MediaType = "application/json";
//    request_.Content = content_;
//    request_.Method = new HttpMethod("PUT");
//    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//    var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//    ProcessResponse(client_, response_);

//    var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//    var status_ = ((int)response_.StatusCode).ToString();

//    if (status_ == "200")
//    {
//        return;
//    }
//    else
//    {
//    }

//    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//}

///// <returns>Success</returns>
///// <exception cref="SwaggerException">A server side error occurred.</exception>
//public Task ApiValuesByIdDeleteAsync(int id)
//{
//    return ApiValuesByIdDeleteAsync(id, CancellationToken.None);
//}

///// <param name="cancellationToken">A cancellation token that can be used by other objects or threads to receive notice of cancellation.</param>
///// <returns>Success</returns>
///// <exception cref="SwaggerException">A server side error occurred.</exception>
//public async Task ApiValuesByIdDeleteAsync(int id, CancellationToken cancellationToken)
//{
//    var url_ = string.Format("{0}/{1}", BaseUrl, "api/Values/{id}");

//    if (id == null)
//        throw new ArgumentNullException("id");
//    url_ = url_.Replace("{id}", Uri.EscapeDataString(id.ToString()));

//    var client_ = new HttpClient();
//    var request_ = new HttpRequestMessage();
//    PrepareRequest(client_, ref url_);
//    request_.Method = new HttpMethod("DELETE");
//    request_.RequestUri = new Uri(url_, UriKind.RelativeOrAbsolute);
//    var response_ = await client_.SendAsync(request_, HttpCompletionOption.ResponseContentRead, cancellationToken).ConfigureAwait(false);
//    ProcessResponse(client_, response_);

//    var responseData_ = await response_.Content.ReadAsByteArrayAsync().ConfigureAwait(false);
//    var status_ = ((int)response_.StatusCode).ToString();

//    if (status_ == "200")
//    {
//        return;
//    }
//    else
//    {
//    }

//    throw new SwaggerException("The HTTP status code of the response was not expected (" + (int)response_.StatusCode + ").", status_, responseData_, null);
//}





//[JsonObject(MemberSerialization.OptIn)]
//[GeneratedCode("NJsonSchema", "5.12.6149.949")]
//public partial class CreateParty : INotifyPropertyChanged
//{
//    private string _partyName;
//    private DateTime _partyDate;
//    private CreatePartyMusicGenre _musicGenre;
//    private Location _location = new Location();
//    private CreatePartyPartyType _partyType;
//    private string _description;

//    [JsonProperty("partyName", Required = Required.Always)]
//    [Required]
//    public string PartyName
//    {
//        get { return _partyName; }
//        set
//        {
//            if (_partyName != value)
//            {
//                _partyName = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("partyDate", Required = Required.Always)]
//    [Required]
//    public DateTime PartyDate
//    {
//        get { return _partyDate; }
//        set
//        {
//            if (_partyDate != value)
//            {
//                _partyDate = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("musicGenre", Required = Required.Always)]
//    public CreatePartyMusicGenre MusicGenre
//    {
//        get { return _musicGenre; }
//        set
//        {
//            if (_musicGenre != value)
//            {
//                _musicGenre = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("location", Required = Required.Always)]
//    [Required]
//    public Location Location
//    {
//        get { return _location; }
//        set
//        {
//            if (_location != value)
//            {
//                _location = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("partyType", Required = Required.Always)]
//    public CreatePartyPartyType PartyType
//    {
//        get { return _partyType; }
//        set
//        {
//            if (_partyType != value)
//            {
//                _partyType = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("description", Required = Required.Always)]
//    [Required]
//    public string Description
//    {
//        get { return _description; }
//        set
//        {
//            if (_description != value)
//            {
//                _description = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    public event PropertyChangedEventHandler PropertyChanged;

//    public string ToJson()
//    {
//        return JsonConvert.SerializeObject(this);
//    }

//    public static CreateParty FromJson(string data)
//    {
//        return JsonConvert.DeserializeObject<CreateParty>(data);
//    }

//    protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
//    {
//        var handler = PropertyChanged;
//        if (handler != null)
//            handler(this, new PropertyChangedEventArgs(propertyName));
//    }
//}

//[JsonObject(MemberSerialization.OptIn)]
//[GeneratedCode("NJsonSchema", "5.12.6149.949")]
//public partial class Location : INotifyPropertyChanged
//{
//    private string _countryName;
//    private string _cityName;
//    private string _streetName;
//    private int? _houseNumber;
//    private string _houseNumberAdditional;
//    private int? _zipcode;
//    private int? _latitude;
//    private int? _longitude;

//    [JsonProperty("countryName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public string CountryName
//    {
//        get { return _countryName; }
//        set
//        {
//            if (_countryName != value)
//            {
//                _countryName = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("cityName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public string CityName
//    {
//        get { return _cityName; }
//        set
//        {
//            if (_cityName != value)
//            {
//                _cityName = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("streetName", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public string StreetName
//    {
//        get { return _streetName; }
//        set
//        {
//            if (_streetName != value)
//            {
//                _streetName = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("houseNumber", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public int? HouseNumber
//    {
//        get { return _houseNumber; }
//        set
//        {
//            if (_houseNumber != value)
//            {
//                _houseNumber = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("houseNumberAdditional", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public string HouseNumberAdditional
//    {
//        get { return _houseNumberAdditional; }
//        set
//        {
//            if (_houseNumberAdditional != value)
//            {
//                _houseNumberAdditional = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("zipcode", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public int? Zipcode
//    {
//        get { return _zipcode; }
//        set
//        {
//            if (_zipcode != value)
//            {
//                _zipcode = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("latitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public int? Latitude
//    {
//        get { return _latitude; }
//        set
//        {
//            if (_latitude != value)
//            {
//                _latitude = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("longitude", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public int? Longitude
//    {
//        get { return _longitude; }
//        set
//        {
//            if (_longitude != value)
//            {
//                _longitude = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    public event PropertyChangedEventHandler PropertyChanged;

//    public string ToJson()
//    {
//        return JsonConvert.SerializeObject(this);
//    }

//    public static Location FromJson(string data)
//    {
//        return JsonConvert.DeserializeObject<Location>(data);
//    }

//    protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
//    {
//        var handler = PropertyChanged;
//        if (handler != null)
//            handler(this, new PropertyChangedEventArgs(propertyName));
//    }
//}

//[JsonObject(MemberSerialization.OptIn)]
//[GeneratedCode("NJsonSchema", "5.12.6149.949")]
//public partial class Party : INotifyPropertyChanged
//{
//    private Guid? _partId;
//    private int? _price;
//    private string _partyName;
//    private DateTime _partyDate;
//    private PartyMusicGenre _musicGenre;
//    private Location _location = new Location();
//    private PartyType _partyType;
//    private string _description;

//    [JsonProperty("partId", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public Guid? PartId
//    {
//        get { return _partId; }
//        set
//        {
//            if (_partId != value)
//            {
//                _partId = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("price", Required = Required.Default, NullValueHandling = NullValueHandling.Ignore)]
//    public int? Price
//    {
//        get { return _price; }
//        set
//        {
//            if (_price != value)
//            {
//                _price = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("partyName", Required = Required.Always)]
//    [Required]
//    public string PartyName
//    {
//        get { return _partyName; }
//        set
//        {
//            if (_partyName != value)
//            {
//                _partyName = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("partyDate", Required = Required.Always)]
//    [Required]
//    public DateTime PartyDate
//    {
//        get { return _partyDate; }
//        set
//        {
//            if (_partyDate != value)
//            {
//                _partyDate = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("musicGenre", Required = Required.Always)]
//    public PartyMusicGenre MusicGenre
//    {
//        get { return _musicGenre; }
//        set
//        {
//            if (_musicGenre != value)
//            {
//                _musicGenre = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("location", Required = Required.Always)]
//    [Required]
//    public Location Location
//    {
//        get { return _location; }
//        set
//        {
//            if (_location != value)
//            {
//                _location = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("partyType", Required = Required.Always)]
//    public PartyType PartyType
//    {
//        get { return _partyType; }
//        set
//        {
//            if (_partyType != value)
//            {
//                _partyType = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    [JsonProperty("description", Required = Required.Always)]
//    [Required]
//    public string Description
//    {
//        get { return _description; }
//        set
//        {
//            if (_description != value)
//            {
//                _description = value;
//                RaisePropertyChanged();
//            }
//        }
//    }

//    public event PropertyChangedEventHandler PropertyChanged;

//    public string ToJson()
//    {
//        return JsonConvert.SerializeObject(this);
//    }

//    public static Party FromJson(string data)
//    {
//        return JsonConvert.DeserializeObject<Party>(data);
//    }

//    protected virtual void RaisePropertyChanged([CallerMemberName] string propertyName = null)
//    {
//        var handler = PropertyChanged;
//        if (handler != null)
//            handler(this, new PropertyChangedEventArgs(propertyName));
//    }
//}

//[GeneratedCode("NJsonSchema", "5.12.6149.949")]
//public enum CreatePartyMusicGenre
//{
//    _0 = 0,

//    _1 = 1,

//    _2 = 2,

//    _3 = 3,

//    _4 = 4,

//    _5 = 5,

//}

//[GeneratedCode("NJsonSchema", "5.12.6149.949")]
//public enum CreatePartyPartyType
//{
//    _0 = 0,

//    _1 = 1,

//    _2 = 2,

//}

//[GeneratedCode("NJsonSchema", "5.12.6149.949")]
//public enum PartyMusicGenre
//{
//    _0 = 0,

//    _1 = 1,

//    _2 = 2,

//    _3 = 3,

//    _4 = 4,

//    _5 = 5,

//}

//[GeneratedCode("NJsonSchema", "5.12.6149.949")]
//public enum PartyType
//{
//    _0 = 0,

//    _1 = 1,

//    _2 = 2,

//}

//[GeneratedCode("NSwag", "6.21.6150.29665")]
//public class SwaggerException : Exception
//{
//    public string StatusCode { get; private set; }

//    public byte[] ResponseData { get; private set; }

//    public SwaggerException(string message, string statusCode, byte[] responseData, Exception innerException)
//        : base(message, innerException)
//    {
//        StatusCode = statusCode;
//        ResponseData = responseData;
//    }

//    public override string ToString()
//    {
//        return string.Format("HTTP Response: n{0}n{1}", Encoding.UTF8.GetString(ResponseData, 0, ResponseData.Length), base.ToString());
//    }
//}

//[GeneratedCode("NSwag", "6.21.6150.29665")]
//public class SwaggerException<TResponse> : SwaggerException
//{
//    public TResponse Response { get; private set; }

//    public SwaggerException(string message, string statusCode, byte[] responseData, TResponse response, Exception innerException)
//        : base(message, statusCode, responseData, innerException)
//    {
//        Response = response;
//    }
//}

//}

